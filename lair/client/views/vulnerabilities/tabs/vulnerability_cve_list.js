Template.vulnerabilityCveList.cves = function () {
    var vulnerability = Vulnerabilities.findOne({
        "project_id": Session.get('projectId'),
        "_id": Session.get('vulnerabilityId')
    });
    if (!vulnerability) {
        return false;
    }
    return vulnerability.cves.sort();
};

Template.vulnerabilityCveList.events({
    'submit form': function (event, tpl) {
        event.preventDefault();
        var projectId = Session.get('projectId');
        var vulnerabilityId = Session.get('vulnerabilityId');
        var cve = tpl.find('[name=cve]').value;
        Meteor.call('addCve', projectId, vulnerabilityId, cve, function (err) {
            if (err) {
                return Alerts.insert({
                    "class": "alert-warning",
                    "strong": "Error",
                    "message": err.reason
                });
            }
            tpl.find('[name=cve]').value = '';
        });
    },

    'click #remove-cves': function () {
        var projectId = Session.get('projectId');
        var vulnerabilityId = Session.get('vulnerabilityId');
        var cveIds = [];
        var inputs = $('.cve-checked');
        inputs.each(function () {
            if ($(this).is(':checked')) {
                cveIds.push($(this).attr('id'));
            }
        });
        cveIds.forEach(function (id) {
            Meteor.call('removeCve', projectId, vulnerabilityId, id);
        });
    }
});
